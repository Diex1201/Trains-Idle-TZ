


//Касаемо замечания по поводу энамов и отсутвтсия интерфейсов для класса ноды. Если я правильно понял задумку, предлагалось создать базовые классы, реализующие интерфейсы,
//по типу IBaseNode или IMineNode. В таком случае пришлось бы постоянно гет компонентить, запрашивая у нод что у них есть(тип, соседей). Я решил использовать базовый класс ноды, в 
//котором прописал общие данные всех нод, затем создал производные классы, добавив им их уникальные поля. Энам я решил использовать, потому что на мой взгляд это 
//более производетельно, ведь с каждой нодой мы работаем через базовый класс, соответственно не гет компонентим а запрашиваем свойство структуры(энама).

//Касаемо названия BaseNode, согласен, если бы не было ноды базы, я бы так назвал базовый класс ноды, а так как есть такая нода, то базовый класс называется просто Node

//Для внедрения зависимостей в проекте я использую Zenject

//Для удобства изменения значений в редакторе, добавил оператор Range чтобы был бегунок, значения задал минимальные и максимальные описанные в ТЗ

//Для спавна трейлов маршрута я решил использовать пул объектов, причем спавнить он их будет с помощью Addressables. Оба решения конечно абсолютно необязательные
//в данном контексте, просто сделал чтобы показать знакомство с этими инструментами/подходами

//Касаемо реализации поезда, в большом проекте как правило много разных мейнеров, это либо поезда с разными поведениями, либо просто другие персонажи, которые тоже добывает,
//но могут отличаться поведением, в таком случае конечно лучше базовый класс и интерфейсы(добычи, движения и т.д), но так как в ТЗ нет речи о том кто то еще будет, и нет намека
//на другие поведения, я просто реализовал все в классе поезда.

//Для связи между классами поезда я применил простой Observer, но для общения между классами Train => ResourceManager и ResourceManager => ResourceUI решил использовать
//шину(EventBus), чтобы классы через нее общались, не зная о существовании друг друга.

